name: Reusable deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      aws-account:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  deploy:
    name: Deploy application to ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT: ${{ secrets.aws-account }}
      AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
      ENVIRONMENT: ${{ inputs.environment }}
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v4

      - name: "üîç build & push docker images"
        run: |
          region=$(awk -F '"' '{print $2;exit}' < infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml)
          echo "Region=${region}"
          
          echo "Building parent lambda..."
          (cd source/lambda_product_prices_collector_parent && \
          ../../misc/build_push_lambda_image.sh ${{ env.AWS_ACCOUNT }} $region)
          
          echo "Building child lambda..."
          (cd source/lambda_product_prices_collector_child && \
          ../../misc/build_push_lambda_image.sh ${{ env.AWS_ACCOUNT }} $region)

      - name: "üîß install terraform 1.3.8"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.8

      - name: "üîß install terragrunt 0.43.2"
        run: |
          curl -LJO https://github.com/gruntwork-io/terragrunt/releases/download/v0.43.2/terragrunt_linux_amd64
          mv terragrunt_linux_amd64 terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin
          ls -l /usr/local/bin
          terragrunt --version

      - name: "üîç prepare environment vars"
        run: |
          region=$(awk -F '"' '{print $2;exit}' < infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml)
          echo "Region=${region}"
          
          echo "Prepare parent image tag"
          parent_lambda_name_and_version=$(awk -F '=' '{print $1;exit}' < source/lambda_product_prices_collector_parent/lambda_spec.txt)
          parent_image_uri="${{ env.AWS_ACCOUNT }}.dkr.ecr.${region}.amazonaws.com/${parent_lambda_name_and_version}"
          parent_image_uri_esc=$(sed 's/[\/\.]/\\&/g' <<<"$parent_image_uri")
          echo "parent_image_uri_esc=${parent_image_uri_esc}"
          sed -i -e 's/lambda_product_prices_collector_parent_image_uri: "[^"]*"/lambda_product_prices_collector_parent_image_uri: "'"$parent_image_uri_esc"'"/g' infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml
          cat infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml
          
          echo "Prepare child image tag"
          child_lambda_name_and_version=$(awk -F '=' '{print $1;exit}' < source/lambda_product_prices_collector_child/lambda_spec.txt)
          child_image_uri="${{ env.AWS_ACCOUNT }}.dkr.ecr.${region}.amazonaws.com/${child_lambda_name_and_version}"
          child_image_uri_esc=$(sed 's/[\/\.]/\\&/g' <<<"$child_image_uri")
          echo "child_image_uri_esc=${child_image_uri_esc}"
          sed -i -e 's/lambda_product_prices_collector_child_image_uri: "[^"]*"/lambda_product_prices_collector_child_image_uri: "'"$child_image_uri_esc"'"/g' infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml
          cat infrastructure/environments/${{ env.ENVIRONMENT }}/env_vars.yaml

      - name: "üîç run terragrunt init and terragrunt apply"
        run: |
          (cd infrastructure/environments/${{ env.ENVIRONMENT }} && \
          terragrunt init --terragrunt-non-interactive && \
          terragrunt apply -auto-approve)
